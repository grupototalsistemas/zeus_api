generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // Use the DATABASE_URL environment variable for production
  // or a local SQLite file for development
  // Uncomment the line below to use a local SQLite file
  // url = "file:./dev.db"
 url = env("DATABASE_URL")
}
/// Role de usu√°rio no sistema
enum Role {
 USER
 SUPPORT
 ADMIN
}
/// Status do chamado
enum TicketStatus {
 OPEN
 IN_PROGRESS
 RESOLVED
 CLOSED
 CANCELLED
}
model User {
 id String @id @default(cuid())
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 email String @unique
 name String
 passwordHash String
 role Role @default(USER)
 ticketsAuthored Ticket[] @relation("AuthorTickets")
 ticketsAssigned Ticket[] @relation("AssignedTickets")
 updates TicketUpdate[]
 refreshTokens RefreshToken[]
}

model Ticket {
 id String @id @default(cuid())
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 title String
 description String
 status TicketStatus @default(OPEN)
 author User @relation("AuthorTickets", fields: [authorId],references: [id])
 authorId String
 assignedTo User? @relation("AssignedTickets", fields:[assignedToId], references: [id])
 assignedToId String?
 updates TicketUpdate[]
}
model TicketUpdate {
 id String @id @default(cuid())
 createdAt DateTime @default(now())
 message String
 previousStatus TicketStatus?
 newStatus TicketStatus?
 ticket Ticket @relation(fields: [ticketId], references: [id])
 ticketId String
 user User @relation(fields: [userId], references: [id])
 userId String
}
model RefreshToken {
 id String @id @default(cuid())
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 token String @unique
 isRevoked Boolean @default(false)
 expiresAt DateTime
 user User @relation(fields: [userId], references: [id])
 userId String
}

